CREATE DOMAIN FTS$D_INDEX_STATUS
CHAR(1) CHARACTER SET UTF8
CHECK (VALUE IN ('I', 'N', 'C', 'U'));

COMMENT ON DOMAIN FTS$D_INDEX_STATUS IS
'Full-text index status. I - Inactive, N - New index (need rebuild), C - complete and active, U - updated metadata (need rebuild).';

CREATE DOMAIN FTS$D_CHANGE_TYPE
CHAR(1) CHARACTER SET UTF8
CHECK (VALUE IN ('I', 'U', 'D'));

COMMENT ON DOMAIN FTS$D_CHANGE_TYPE IS
'Type of record change. I - INSERT, U - UPDATE, D - DELETE.';

CREATE DOMAIN FTS$D_REC_ID
CHAR(8) CHARACTER SET OCTETS;

COMMENT ON DOMAIN FTS$D_REC_ID IS
'Record ID (RDB$DB_KEY).';

CREATE TABLE FTS$INDICES(
   FTS$INDEX_NAME VARCHAR(63) CHARACTER SET UTF8 NOT NULL,
   FTS$ANALYZER VARCHAR(63) CHARACTER SET UTF8 DEFAULT 'STANDARD' NOT NULL,
   FTS$DESCRIPTION BLOB SUB_TYPE TEXT CHARACTER SET UTF8,
   FTS$INDEX_STATUS FTS$D_INDEX_STATUS DEFAULT 'N' NOT NULL,
   CONSTRAINT PK_FTS$INDEX_NAME PRIMARY KEY(FTS$INDEX_NAME)
);

COMMENT ON TABLE FTS$INDICES IS
'Indexes for full-text search.';

COMMENT ON COLUMN FTS$INDICES.FTS$INDEX_NAME IS
'Full-text index name.';

COMMENT ON COLUMN FTS$INDICES.FTS$ANALYZER IS
'The analyzer. If not specified, it uses STANDARD (StandardAnalyzer) by default.';

COMMENT ON COLUMN FTS$INDICES.FTS$DESCRIPTION IS
'Description of the full-text index.';

COMMENT ON COLUMN FTS$INDICES.FTS$DESCRIPTION IS
'Full-text index status.';

CREATE TABLE FTS$INDEX_SEGMENTS(
   FTS$INDEX_NAME VARCHAR(63) CHARACTER SET UTF8 NOT NULL,
   FTS$RELATION_NAME VARCHAR(63) CHARACTER SET UTF8 NOT NULL,
   FTS$FIELD_NAME VARCHAR(63) CHARACTER SET UTF8 NOT NULL,
   FTS$BOOST DOUBLE PRECISION,
   CONSTRAINT UK_FTS$INDEX_SEGMENTS UNIQUE(FTS$INDEX_NAME, FTS$RELATION_NAME, FTS$FIELD_NAME),
   CONSTRAINT FK_FTS$INDEX_SEGMENTS FOREIGN KEY(FTS$INDEX_NAME) REFERENCES FTS$INDICES(FTS$INDEX_NAME) ON DELETE CASCADE
);

CREATE INDEX IDX_FTS$INDEX_SEGMENTS_REL
ON FTS$INDEX_SEGMENTS (FTS$RELATION_NAME);


COMMENT ON TABLE FTS$INDEX_SEGMENTS IS
'Segments of the full-text index.';

COMMENT ON COLUMN FTS$INDEX_SEGMENTS.FTS$INDEX_NAME IS
'Full-text index name.';

COMMENT ON COLUMN FTS$INDEX_SEGMENTS.FTS$RELATION_NAME IS
'Name of the indexed table.';

COMMENT ON COLUMN FTS$INDEX_SEGMENTS.FTS$FIELD_NAME IS
'Name of the indexed field.';

COMMENT ON COLUMN FTS$INDEX_SEGMENTS.FTS$BOOST IS 
'Boost significance';



CREATE TABLE FTS$LOG (
  FTS$LOG_ID BIGINT /*INT*/ GENERATED BY DEFAULT AS IDENTITY,
  FTS$RELATION_NAME VARCHAR(63) CHARACTER SET UTF8 NOT NULL,
  FTS$REC_ID FTS$D_REC_ID NOT NULL,
  FTS$CHANGE_TYPE FTS$D_CHANGE_TYPE NOT NULL,
  CONSTRAINT PK_FTS$LOG_ID PRIMARY KEY(FTS$LOG_ID)
);

COMMENT ON TABLE FTS$LOG IS
'Changelog for maintaining full-text indexes.';

COMMENT ON COLUMN FTS$LOG.FTS$LOG_ID IS
'Identifier.';

COMMENT ON COLUMN FTS$LOG.FTS$RELATION_NAME IS
'Name of the indexed table.';

COMMENT ON COLUMN FTS$LOG.FTS$REC_ID IS
'Record ID.';

COMMENT ON COLUMN FTS$LOG.FTS$CHANGE_TYPE IS
'Type of record change.';

SET TERM ^ ;

CREATE OR ALTER PACKAGE FTS$MANAGEMENT
AS
BEGIN
  FUNCTION FTS$GET_DIRECTORY ()
  RETURNS VARCHAR(255) CHARACTER SET UTF8;

  PROCEDURE FTS$ANALYZERS 
  RETURNS (
     FTS$ANALYZER VARCHAR(63) CHARACTER SET UTF8
  );

  PROCEDURE FTS$CREATE_INDEX (
     FTS$INDEX_NAME VARCHAR(63) CHARACTER SET UTF8 NOT NULL,
     FTS$ANALYZER VARCHAR(63) CHARACTER SET UTF8 DEFAULT NULL,
     FTS$DESCRIPTION BLOB SUB_TYPE TEXT CHARACTER SET UTF8 DEFAULT NULL
  );

  PROCEDURE FTS$DROP_INDEX (
     FTS$INDEX_NAME VARCHAR(63) CHARACTER SET UTF8 NOT NULL
  );

  PROCEDURE FTS$SET_INDEX_ACTIVE (
     FTS$INDEX_NAME VARCHAR(63) CHARACTER SET UTF8 NOT NULL,
     FTS$INDEX_ACTIVE BOOLEAN NOT NULL
  );

  PROCEDURE FTS$ADD_INDEX_FIELD (
    FTS$INDEX_NAME VARCHAR(63) CHARACTER SET UTF8 NOT NULL,
    FTS$RELATION_NAME VARCHAR(63) CHARACTER SET UTF8 NOT NULL,
    FTS$FIELD_NAME VARCHAR(63) CHARACTER SET UTF8 NOT NULL,
    FTS$BOOST DOUBLE PRECISION DEFAULT NULL
  );

  PROCEDURE FTS$DROP_INDEX_FIELD (
    FTS$INDEX_NAME VARCHAR(63) CHARACTER SET UTF8 NOT NULL,
    FTS$RELATION_NAME VARCHAR(63) CHARACTER SET UTF8 NOT NULL,
    FTS$FIELD_NAME VARCHAR(63) CHARACTER SET UTF8 NOT NULL
  );

  PROCEDURE FTS$REBUILD_INDEX (
     FTS$INDEX_NAME VARCHAR(63) CHARACTER SET UTF8 NOT NULL
  );

  PROCEDURE FTS$REINDEX_TABLE(
     FTS$RELATION_NAME VARCHAR(63) CHARACTER SET UTF8 NOT NULL
  );

  PROCEDURE FTS$FULL_REINDEX;
END^

RECREATE PACKAGE BODY FTS$MANAGEMENT
AS
BEGIN
  FUNCTION FTS$GET_DIRECTORY ()
  RETURNS VARCHAR(255) CHARACTER SET UTF8
  EXTERNAL NAME 'luceneudr!getFTSDirectory'
  ENGINE UDR;

  PROCEDURE FTS$ANALYZERS 
  RETURNS (
     FTS$ANALYZER VARCHAR(63) CHARACTER SET UTF8
  )
  EXTERNAL NAME 'luceneudr!getAnalyzers'
  ENGINE UDR;

  PROCEDURE FTS$CREATE_INDEX (
     FTS$INDEX_NAME VARCHAR(63) CHARACTER SET UTF8 NOT NULL,
     FTS$ANALYZER VARCHAR(63) CHARACTER SET UTF8,
     FTS$DESCRIPTION BLOB SUB_TYPE TEXT CHARACTER SET UTF8
  )
  EXTERNAL NAME 'luceneudr!createIndex'
  ENGINE UDR;

  PROCEDURE FTS$DROP_INDEX (
     FTS$INDEX_NAME VARCHAR(63) CHARACTER SET UTF8 NOT NULL
  )
  EXTERNAL NAME 'luceneudr!dropIndex'
  ENGINE UDR;

  PROCEDURE FTS$SET_INDEX_ACTIVE (
     FTS$INDEX_NAME VARCHAR(63) CHARACTER SET UTF8 NOT NULL,
     FTS$INDEX_ACTIVE BOOLEAN NOT NULL
  )
  EXTERNAL NAME 'luceneudr!setIndexActive'
  ENGINE UDR;

  PROCEDURE FTS$ADD_INDEX_FIELD (
    FTS$INDEX_NAME VARCHAR(63) CHARACTER SET UTF8 NOT NULL,
    FTS$RELATION_NAME VARCHAR(63) CHARACTER SET UTF8 NOT NULL,
    FTS$FIELD_NAME VARCHAR(63) CHARACTER SET UTF8 NOT NULL,
    FTS$BOOST DOUBLE PRECISION
  )
  EXTERNAL NAME 'luceneudr!addIndexField'
  ENGINE UDR;

  PROCEDURE FTS$DROP_INDEX_FIELD (
    FTS$INDEX_NAME VARCHAR(63) CHARACTER SET UTF8 NOT NULL,
    FTS$RELATION_NAME VARCHAR(63) CHARACTER SET UTF8 NOT NULL,
    FTS$FIELD_NAME VARCHAR(63) CHARACTER SET UTF8 NOT NULL
  )
  EXTERNAL NAME 'luceneudr!dropIndexField'
  ENGINE UDR;

  PROCEDURE FTS$REBUILD_INDEX (
     FTS$INDEX_NAME VARCHAR(63) CHARACTER SET UTF8 NOT NULL
  )
  EXTERNAL NAME 'luceneudr!rebuildIndex'
  ENGINE UDR;

  PROCEDURE FTS$REINDEX_TABLE (
     FTS$RELATION_NAME VARCHAR(63) CHARACTER SET UTF8 NOT NULL
  )
  AS
  BEGIN
    FOR 
      SELECT DISTINCT FTS$INDEX_NAME
      FROM FTS$INDEX_SEGMENTS
      WHERE FTS$RELATION_NAME = :FTS$RELATION_NAME
      AS CURSOR C
     DO 
     BEGIN
       EXECUTE PROCEDURE FTS$REBUILD_INDEX(:C.FTS$INDEX_NAME);
     END
  END

  PROCEDURE FTS$FULL_REINDEX
  AS
  BEGIN
    FOR 
      SELECT FTS$INDEX_NAME
      FROM FTS$INDICES
      AS CURSOR C
     DO 
     BEGIN
       EXECUTE PROCEDURE FTS$REBUILD_INDEX(:C.FTS$INDEX_NAME);
     END
  END
END^

SET TERM ; ^

COMMENT ON PACKAGE FTS$MANAGEMENT IS
'Procedures and functions for managing full-text indexes.';

GRANT ALL ON TABLE FTS$INDICES TO PACKAGE FTS$MANAGEMENT;
GRANT ALL ON TABLE FTS$INDEX_SEGMENTS TO PACKAGE FTS$MANAGEMENT;

CREATE OR ALTER PROCEDURE FTS$SEARCH (
   FTS$INDEX_NAME VARCHAR(63) CHARACTER SET UTF8 NOT NULL,
   FTS$SEARCH_RELATION VARCHAR(63) CHARACTER SET UTF8,
   FTS$FILTER VARCHAR(8191) CHARACTER SET UTF8,
   FTS$LIMIT INT /*BIGINT*/ NOT NULL DEFAULT 1000,
   FTS$EXPLAIN BOOLEAN DEFAULT FALSE
)
RETURNS (
   FTS$RELATION_NAME VARCHAR(63) CHARACTER SET UTF8,
   FTS$REC_ID FTS$D_REC_ID,
   FTS$SCORE DOUBLE PRECISION,
   FTS$EXPLANATION BLOB SUB_TYPE TEXT CHARACTER SET UTF8
)
EXTERNAL NAME 'luceneudr!ftsSearch'
ENGINE UDR;

COMMENT ON PROCEDURE FTS$SEARCH IS
'Performs a full-text search at the specified index.';

COMMENT ON PARAMETER FTS$SEARCH.FTS$INDEX_NAME IS
'Name of the full-text index to search.';

COMMENT ON PARAMETER FTS$SEARCH.FTS$SEARCH_RELATION IS
'The name of the table, restricts the search to the specified table only. If the table is not specified, then the search is done on all index segments.';

COMMENT ON PARAMETER FTS$SEARCH.FTS$FILTER IS
'Full text search expression.';

COMMENT ON PARAMETER FTS$SEARCH.FTS$LIMIT IS
'Limit on the number of records (search result).';

COMMENT ON PARAMETER FTS$SEARCH.FTS$EXPLAIN IS
'Explain the search results';

COMMENT ON PARAMETER FTS$SEARCH.FTS$RELATION_NAME IS
'The name of the table in which the document is found.';

COMMENT ON PARAMETER FTS$SEARCH.FTS$REC_ID IS
'Reference to the record in the table where the document was found (corresponds to the RDB$DB_KEY pseudo field).';

COMMENT ON PARAMETER FTS$SEARCH.FTS$SCORE IS
'The degree of match to the search query.';

COMMENT ON PARAMETER FTS$SEARCH.FTS$EXPLANATION IS
'Explanation of the search result';

GRANT SELECT ON TABLE FTS$INDICES TO PROCEDURE FTS$SEARCH;
GRANT SELECT ON TABLE FTS$INDEX_SEGMENTS TO PROCEDURE FTS$SEARCH;

CREATE OR ALTER PROCEDURE FTS$UPDATE_INDEXES
EXTERNAL NAME 'luceneudr!updateFtsIndexes' 
ENGINE UDR;

COMMENT ON PROCEDURE FTS$UPDATE_INDEXES IS
'Updates full-text indexes on entries in the FTS$LOG change log.';

GRANT SELECT ON TABLE FTS$INDICES TO PROCEDURE FTS$UPDATE_INDEXES;
GRANT SELECT ON TABLE FTS$INDEX_SEGMENTS TO PROCEDURE FTS$UPDATE_INDEXES;
GRANT SELECT, DELETE ON TABLE FTS$LOG TO PROCEDURE FTS$UPDATE_INDEXES;

CREATE OR ALTER PROCEDURE FTS$LOG_CHANGE (
    FTS$RELATION_NAME  VARCHAR(63) CHARACTER SET UTF8 NOT NULL,
    FTS$REC_ID         FTS$D_REC_ID NOT NULL,
    FTS$CHANGE_TYPE    FTS$D_CHANGE_TYPE NOT NULL
)
EXTERNAL NAME 'luceneudr!ftsLogChange'
ENGINE UDR;

COMMENT ON PROCEDURE FTS$LOG_CHANGE IS
'Adds a change record for one of the fields included in full-text indexes built on the table to the change log, based on which full-text indexes will be updated.';

COMMENT ON PARAMETER FTS$LOG_CHANGE.FTS$RELATION_NAME IS
'The name of the table for which the link to the record is added.';

COMMENT ON PARAMETER FTS$LOG_CHANGE.FTS$REC_ID IS
'Record ID(corresponds to the RDB$DB_KEY pseudo field).';

COMMENT ON PARAMETER FTS$LOG_CHANGE.FTS$CHANGE_TYPE IS
'Change type (I - INSERT, U - UPDATE, D - DELETE).';

GRANT INSERT ON TABLE FTS$LOG TO PROCEDURE FTS$LOG_CHANGE;

CREATE OR ALTER PROCEDURE FTS$CLEAR_LOG
EXTERNAL NAME 'luceneudr!ftsClearLog'
ENGINE UDR;

COMMENT ON PROCEDURE FTS$CLEAR_LOG IS
'Clears the FTS$LOG entry change log.';

GRANT SELECT, DELETE ON TABLE FTS$LOG TO PROCEDURE FTS$CLEAR_LOG;

SET TERM ^ ;

CREATE OR ALTER PACKAGE FTS$TRIGGER_HELPER
AS
BEGIN

  PROCEDURE FTS$MAKE_TRIGGERS (
    FTS$RELATION_NAME VARCHAR(63) CHARACTER SET UTF8,
    FTS$MULTI_ACTION BOOLEAN DEFAULT TRUE
  )
  RETURNS (
    FTS$TRIGGER_SOURCE BLOB SUB_TYPE TEXT CHARACTER SET UTF8
  );

  PROCEDURE FTS$MAKE_TRIGGERS_BY_INDEX (
    FTS$INDEX_NAME VARCHAR(63) CHARACTER SET UTF8,
    FTS$MULTI_ACTION BOOLEAN DEFAULT TRUE
  )
  RETURNS (
    FTS$TRIGGER_SOURCE BLOB SUB_TYPE TEXT CHARACTER SET UTF8
  );

  PROCEDURE FTS$MAKE_ALL_TRIGGERS (
    FTS$MULTI_ACTION BOOLEAN DEFAULT TRUE
  )
  RETURNS (
    FTS$TRIGGER_SOURCE BLOB SUB_TYPE TEXT CHARACTER SET UTF8
  );
   
END^

RECREATE PACKAGE BODY FTS$TRIGGER_HELPER
AS
BEGIN

  PROCEDURE FTS$MAKE_TRIGGERS (
    FTS$RELATION_NAME VARCHAR(63) CHARACTER SET UTF8,
    FTS$MULTI_ACTION BOOLEAN
  )
  RETURNS (
    FTS$TRIGGER_SOURCE BLOB SUB_TYPE TEXT CHARACTER SET UTF8
  )
  EXTERNAL NAME 'luceneudr!ftsMakeTrigger'
  ENGINE UDR;

  PROCEDURE FTS$MAKE_TRIGGERS_BY_INDEX (
    FTS$INDEX_NAME VARCHAR(63) CHARACTER SET UTF8,
    FTS$MULTI_ACTION BOOLEAN
  )
  RETURNS (
    FTS$TRIGGER_SOURCE BLOB SUB_TYPE TEXT CHARACTER SET UTF8
  )
  AS
  BEGIN
    FOR
      SELECT
        FTS$RELATION_NAME
      FROM FTS$INDEX_SEGMENTS S
      WHERE S.FTS$INDEX_NAME = :FTS$INDEX_NAME
      GROUP BY 1
      AS CURSOR C
    DO
    BEGIN
      FOR
        SELECT FTS$TRIGGER_SOURCE
        FROM FTS$TRIGGER_HELPER.FTS$MAKE_TRIGGERS(:C.FTS$RELATION_NAME, :FTS$MULTI_ACTION)
        INTO :FTS$TRIGGER_SOURCE
      DO
        SUSPEND;
    END
  END

  PROCEDURE FTS$MAKE_ALL_TRIGGERS (
    FTS$MULTI_ACTION BOOLEAN
  )
  RETURNS (
    FTS$TRIGGER_SOURCE BLOB SUB_TYPE TEXT CHARACTER SET UTF8
  )
  AS
  BEGIN
    FOR
      SELECT
        FTS$RELATION_NAME
      FROM FTS$INDEX_SEGMENTS S
      GROUP BY 1
      AS CURSOR C
    DO
    BEGIN
      FOR
        SELECT FTS$TRIGGER_SOURCE
        FROM FTS$TRIGGER_HELPER.FTS$MAKE_TRIGGERS(:C.FTS$RELATION_NAME, :FTS$MULTI_ACTION)
        INTO :FTS$TRIGGER_SOURCE
      DO
        SUSPEND;
    END
  END

END^

SET TERM ; ^

COMMENT ON PACKAGE FTS$TRIGGER_HELPER IS
'Utilities for creating triggers that support full-text search indexes.';

GRANT EXECUTE ON PACKAGE FTS$TRIGGER_HELPER TO PACKAGE FTS$TRIGGER_HELPER;
GRANT SELECT ON FTS$INDEX_SEGMENTS TO PACKAGE FTS$TRIGGER_HELPER;


